name: Windows CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build_windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: Build on Windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            visual_studio: "Visual Studio 15 2017"
            toolset: "14.16"
            arch: x64
            cuda: "11.3.0"
            cuda_arch: 86
          - os: windows-latest
            visual_studio: "Visual Studio 16 2019"
            toolset: "14.29"
            arch: x64
            cuda: "11.3.0"
            cuda_arch: 86
          - os: windows-latest
            visual_studio: "Visual Studio 17 2022"
            toolset: "14.31"
            arch: x64
            cuda: "11.3.0"
            cuda_arch: 86
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
      TCNN_CUDA_ARCHITECTURES: ${{ matrix.cuda_arch }}
      build_dir: "build"
      config: "Release"
      build_system: "Ninja"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
        with:
          arch: ${{ matrix.arch }}
          toolset: ${{ matrix.toolset }}

      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
          visual_studio: ${{ matrix.visual_studio }}
        shell: powershell
        run: .\.github\workflows\install_cuda_windows.ps1

      - name: Get cmake
        # Install latest CMake.
        uses: lukka/get-cmake@latest

      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        id: vcpkg-cache
        with:
          # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
          # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            ${{ github.workspace }}/build/vcpkg_installed
            !${{ env.VCPKG_ROOT }}/.git
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg.json' ) }}-${{ matrix.os }}-${{ matrix.toolset }}-${{ matrix.arch }}-cache-key

      - name: remove system vcpkg(windows)
        if: runner.os == 'Windows'
        run: rm -rf "$VCPKG_INSTALLATION_ROOT"
        shell: bash

      - name: Get vcpkg(windows)
        working-directory: ${{ github.workspace }}
        if: ${{ runner.os == 'Windows' && steps.vcpkg-cache.outputs.cache-hit != 'true' }}
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat

      - name: Fix vcpkg(windows)
        working-directory: ${{ env.VCPKG_ROOT }}
        if: ${{ runner.os == 'Windows' && steps.vcpkg-cache.outputs.cache-hit != 'true' && matrix.toolset == '14.16' }}
        run: |
          'set(VCPKG_PLATFORM_TOOLSET "v141")' | Out-File -Append .\triplets\x64-windows.cmake
          'set(VCPKG_DEP_INFO_OVERRIDE_VARS "v141")' | Out-File -Append .\triplets\x64-windows.cmake

      - name: Running cmake
        # Build with Ninja
        working-directory: ${{ github.workspace }}
        run: |
          cmake -B ${{ env.build_dir }} -G ${{ env.build_system }} -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake

      - name: Build Solution
        working-directory: ${{ github.workspace }}
        run: |
          cmake --build ${{ env.build_dir }} --parallel --config ${{ env.config }} --verbose

      - name: Test
        working-directory: ${{ github.workspace }}/${{ env.build_dir }}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{ env.config }}

      # - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      # - name: Build
      # Build your program with the given configuration
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
