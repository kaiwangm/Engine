name: Windows CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            visual_studio: "Visual Studio 17 2022"
            triplet: x64-windows
          - os: windows-latest
            visual_studio: "Visual Studio 16 2019"
            triplet: x64-windows
          - os: windows-latest
            visual_studio: "Visual Studio 15 2017"
            triplet: x64-windows
    env:
      build_dir: "build"
      config: "Release"
      VCPKG_ROOT: '${{ github.workspace }}/vcpkg'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: Get cmake
        # Install latest CMake.
        uses: lukka/get-cmake@latest

      - name: Get vcpkg(windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          cd ${{ github.workspace }}
          git clone https://github.com/Microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat

      - name: remove system vcpkg(windows)
        if: runner.os == 'Windows'
        run: rm -rf "$VCPKG_INSTALLATION_ROOT"
        shell: bash
      
      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
        with:
          arch: x64
      
      - name: Running cmake
        run: |
          cd ${{ github.workspace }}
          cmake -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build Solution
        run: |
          cmake --build build --parallel --config Release

    # - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    # - name: Build
      # Build your program with the given configuration
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # - name: Test
      # working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C ${{env.BUILD_TYPE}}
      
